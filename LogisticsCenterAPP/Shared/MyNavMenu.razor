@using LogisticsCenterAPP.Auth
@using LogisticsCenterAPP.Services
@using LogisticsCenterMODELS.Models.DTOModels 
@inject NavigationManager _navigation
@inject HttpClient _http
@inject ISessionStorageServices sessionStorageServices
@inject ILoginServices loginServices

<style>
.d-flex {
     width:150px
}
 .btnLogout {
 position: relative;
 font-size: 14px;
 letter-spacing: 3px;
 height: 3em;
 width:25em;
 padding: 0 3em;
 border: none;
 background-color: #c41b54;
 color: #fff;
 text-transform: uppercase;
 overflow: hidden;
 border-radius: 5px
}

.btnLogout::before {
 content: '';
 display: block;
 position: absolute;
 z-index: 0;
 bottom: 0;
 left: 0;
 height: 0px;
 width: 100%;
 background: rgb(196,27,84);
 background: -webkit-gradient(linear, left top, right top, color-stop(20%, rgba(196,27,84,1)), to(rgba(124,7,46,1)));
 background: linear-gradient(90deg, rgba(196,27,84,1) 20%, rgba(124,7,46,1) 100%);
 -webkit-transition: 0.2s;
 transition: 0.2s;
}

.btnLogout .label {
 position: relative;
}

.btnLogout .icon {
 display: -webkit-box;
 display: -ms-flexbox;
 display: flex;
 -webkit-box-align: center;
     -ms-flex-align: center;
         align-items: center;
 -webkit-box-pack: center;
     -ms-flex-pack: center;
         justify-content: center;
 height: 3em;
 width: 3em;
 position: absolute;
 top: 3em;
 right: 0;
 opacity: 0;
 -webkit-transition: 0.4s;
 transition: 0.4s;
}

.btnLogout:hover::before {
 height: 100%;
}

.btnLogout:hover .icon {
 top: 0;
 opacity: 1;
}
</style>
<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
  <div class="container-fluid">
    <a class="navbar-brand" href="/Index"><b>Logistics Center</b></a>
    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNavDropdown" aria-controls="navbarNavDropdown" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarNavDropdown">
      <ul class="navbar-nav">
        @*<li class="nav-item">
          <a class="nav-link active" aria-current="page" href="#">Home</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="#">Features</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="#">Pricing</a>
        </li>*@
        <li class="nav-item dropdown">
          <a class="nav-link dropdown-toggle" href="#" id="navbarDropdownMenuLink" role="button" data-bs-toggle="dropdown" aria-expanded="false">
            Administration
          </a>
          <ul class="dropdown-menu bg-dark" aria-labelledby="navbarDropdownMenuLink">
             <NavLink class="nav-link" href="RegisterUser">
                <span class="@*oi oi-list-rich*@" aria-hidden="true"></span>Register User
            </NavLink>
          </ul>
        </li>
      </ul>    
    </div>
     <div class="d-flex">
           <AuthorizeView>
            <Authorized>
                   <button @onclick="LogOut" class="btnLogout">
                      <span class="label">Log Out</span>
                      <span class="icon">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24"><path fill="none" d="M0 0h24v24H0z"></path><path fill="currentColor" d="M16.172 11l-5.364-5.364 1.414-1.414L20 12l-7.778 7.778-1.414-1.414L16.172 13H4v-2z"></path></svg>
                      </span>
                    </button>
            </Authorized>
        </AuthorizeView>
    </div>
  </div>
</nav>
@code
{


    [CascadingParameter]
    private Task<AuthenticationState> authentication { get; set; }


    string Username = "";
    private async Task LogOut()
    {
        await loginServices.Logout();
        _navigation.NavigateTo("/");
    }
    private void logIn()
    {
        _navigation.NavigateTo("/");
    }
    public async Task ShowUser() 
    {
        var data = await authentication;
        if (data.User.Identity.IsAuthenticated)
        {
            Username = data.User.Identity.Name;
        }
    } 
    protected override async Task OnInitializedAsync()
    { 
        await ShowUser();
    }
}