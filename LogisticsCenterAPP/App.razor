@using System.Security.Claims
@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager _navigationManager;


<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(Program).Assembly" PreferExactMatches="@true">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
        </Found>
        <NotFound>
            <LayoutView Layout="@typeof(MainLayout)">
                <p>Sorry, there's nothing at this address.</p>
                
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>


@code {

    //[CascadingParameter]
    //private Task<AuthenticationState> authentication { get; set; }

    //public bool ValidAuth { get; set; } = false;
    protected override async Task OnInitializedAsync()
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (!user.Identity.IsAuthenticated)
        {
            _navigationManager.NavigateTo("/", false);
        }


    }
    //public async Task Valid()
    //{
    //    var obj = await authentication;
    //    if (!obj.User.Identity.IsAuthenticated)
    //    {
    //        ValidAuth = true;
    //    }
    //    else
    //    {
    //        ValidAuth = false;
    //    }
    //}
}